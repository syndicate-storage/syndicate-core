#!/usr/bin/env python

"""
   Copyright 2015 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""


import traceback
import os
import sys
import errno
import syndicate.util.gateway as gateway

def get_or_make_storage_dir( config, chunk_path ):
   """
   Generate the directories on the path to a given chunk.
   Return (0, on-disk path) on success.
   Return (-errno, None) on failure.
   """
   
   STORAGE_DIR = str(config.get('STORAGE_DIR', ""))
   if len(STORAGE_DIR) == 0:
     
      gateway.log_error("No STORAGE_DIR configured")
      return (-errno.EINVAL, None )
   
   storage_path = os.path.join( STORAGE_DIR, chunk_path )
   storage_dir = os.path.dirname( storage_path )

   if not os.path.exists( storage_dir ):
      os.makedirs( storage_dir )

   return (0, storage_path)


def read_chunk( chunk_request, outfile, config, secrets ):
   
   chunk_path = gateway.request_to_storage_path( chunk_request )
   rc, storage_path = get_or_make_storage_dir( config, chunk_path )
   if rc != 0:
      return rc

   if not os.path.exists( storage_path ):
      gateway.log_error("WARN: '%s' does not exist" % storage_path)
      return -errno.ENOENT 

   try:
      with open(storage_path, "r") as fd:
          outfile.write( fd.read() )

   except Exception, e:
     
      gateway.log_error(traceback.format_exc())
      sys.stderr.flush()
      return -errno.EIO
   
   return 0


def write_chunk( chunk_request, chunk_buf, config, secrets ):
   
   chunk_path = gateway.request_to_storage_path( chunk_request )
   rc, storage_path = get_or_make_storage_dir( config, chunk_path )
   if rc != 0:
       gateway.log_error("WARN: could not make or load storage directory for '%s'" % chunk_path)
       return rc
   
   try:
       with open(storage_path, "w") as fd:
           fd.write( chunk_buf )

   except Exception, e:
     
      gateway.log_error(traceback.format_exc())
      return -errno.EIO
  
   gateway.log_debug("Wrote chunk at (%s,%s)" % (gateway.request_byte_offset(chunk_request), gateway.request_byte_len(chunk_request)))

   return 0


def delete_chunk( chunk_request, config, secrets ):

   chunk_path = gateway.request_to_storage_path( chunk_request )
   rc, storage_path = get_or_make_storage_dir( config, chunk_path )
   if rc != 0:
       gateway.log_error("WARN: could not make or load storage directory for '%s'" % chunk_path )
       return rc
  
   if not os.path.exists( storage_path ):
       gateway.log_error("WARN: '%s' does not exist" % storage_path)
       return 0

   try:
      os.unlink( storage_path )
   
   except Exception, e:
      
      gateway.log_error(traceback.format_exc())
      return -errno.EIO
   
   return 0
